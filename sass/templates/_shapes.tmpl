// !!!!! This file is generated by gulp-iconfont-css
// !!!!! Only edit sass/templates/_shapes.tmpl not sass/base/_shapes.scss

/* ############################################################################
 * # shapes
 * ############################################################################ */

/*

// http://caniuse.com/#feat=svg
// svg external files:
// https://css-tricks.com/svg-use-with-external-reference-take-2/

*/

/* ////////////////////////////////////////////////////////////////////////////
 * shapes
 * ///////////////////////////////////////////////////////////////////////// */

/// shapes
/// @access public
/// @type List
/// @group config-svg
$shapes: (
<% _.each(items, function(item) { %>  <%= item %>: 'shape-<%= item %>',
<% }); %>);

/* ////////////////////////////////////////////////////////////////////////////
 * loop over the $shapes list
 * ///////////////////////////////////////////////////////////////////////// */

/// The shapes block mixin wraps svg shape names
/// @access public
/// @example scss -
///
/// shape styles classes are combined (prefered way)
/// li {
///   @include shapes {
///     svg {
///       fill: $font-color;
///     }
///   }
/// }
///
/// shape styles gets own class
/// li {
///   @each $key, $value in $shapes {
///     .shape-#{$key} {
///       svg {
///         width: 1em;
///         height: 1em;
///       }
///     }
///   }
/// }
///

// sass-lint:disable-all

@mixin shapes {
  .shape,
  <% _.each(items, function(item) { %>.shape-<%= item %>,
  <% }); %>
  {
    @content;
  }
}

// sass-lint:enable-all

/// shapes-styling
/// @access public
/// @group config-svg
/// @example scss -
///  li {
///    \@extend %shapes-styling;
/// }

%shapes-styling {
  color: var(--body-color);

  svg {
    margin: 0;
    padding: 0;
    fill: var(--body-color);
    width: 1em;
    height: 1em;
  }

  a {
    color: var(--link-color);
    text-decoration: none;

    svg {
      fill: var(--link-color);
    }

    &:hover {
      color: var(--link-color-hover);

      svg {
        fill: var(--link-color-hover);
      }

    }

  }

}

//
// EOF
//
<%
// preserve newline
%>
